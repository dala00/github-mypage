import MypageHeader from '@/components/mypage/header/MypageHeader'
import { useAuthentication } from '@/hooks/useAuthentication'
import { GitHubCommit } from '@/models/github/GitHubCommit'
import { GitHubCommitsResponseData } from '@/models/response/github_response'
import { Box, Container, Divider, Link } from '@chakra-ui/layout'
import { Spinner, Text } from '@chakra-ui/react'
import axios from 'axios'
import { DateTime } from 'luxon'
import { useRouter } from 'next/dist/client/router'
import Head from 'next/head'
import React, { useCallback, useEffect, useState } from 'react'

export default function CommitsPage() {
  const router = useRouter()
  const { apiHeaders, isInitialized, user } = useAuthentication({
    shouldInitialize: true,
  })
  const [commits, setCommits] = useState<GitHubCommit[]>([])
  const [isLoaded, setIsLoaded] = useState(false)

  const initialize = useCallback(async () => {
    const result = await axios.get<GitHubCommitsResponseData>(
      '/api/github/commits',
      apiHeaders
    )
    setCommits(result.data.commits)
    setIsLoaded(true)
  }, [user])

  useEffect(() => {
    if (!user) {
      return
    }
    initialize()
  }, [user])

  useEffect(() => {
    if (isInitialized && !user) {
      router.push('/')
    }
  }, [user, isInitialized])

  return (
    <Box minHeight="100vh">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <MypageHeader />

      <Container>
        {isLoaded ? (
          <>
            {commits.map((commit) => (
              <Box key={commit.sha}>
                <Divider />
                <Box my={6}>
                  <Box>
                    <Link
                      href={commit.repository.html_url}
                      fontSize={12}
                      display="block"
                    >
                      {commit.repository.full_name}
                    </Link>
                    <Link
                      href={commit.html_url}
                      fontSize={16}
                      display="block"
                      color="blue.500"
                    >
                      {commit.commit.message}
                    </Link>
                    <Box fontSize={12}>
                      <Link href={commit.committer.html_url}>
                        {commit.committer.login}
                      </Link>{' '}
                      commited
                      <Text display="inline-block" ml={1}>
                        {DateTime.fromISO(commit.commit.committer.date)
                          .toLocal()
                          .toRelative()}
                      </Text>
                    </Box>
                  </Box>
                </Box>
              </Box>
            ))}
          </>
        ) : (
          <Box m={16} textAlign="center">
            <Spinner />
          </Box>
        )}
      </Container>

      <footer></footer>
    </Box>
  )
}
